-- Basic verbosity
:set -v1

-- Compile to object code
:set -fwrite-interface -fobject-code

-- Pretty-printing
-- :set -optP=-Wno-macro-redefined -- enable this to ignore CPP warnings about version macros being redefined when using cabal repl
:set -package "pretty-simple (Text.Pretty.Simple as REPL_.Pretty)"
:set -interactive-print REPL_.Pretty.pPrint

-- Enable some language extensions
:seti -XDataKinds
:seti -XFlexibleContexts
:seti -XTypeApplications
:seti -XTypeOperators

-- Break on errors
:seti -fbreak-on-error

-- Treat warnings as warnings
:set -Wwarn

-- Automatically show the code around breakpoints
:set stop :list

-- Use a multiline cyan prompt
:set -package "process-1.6.8.2 (System.Process as REPL_.Process)"
:{
:def setupPrompt (\ _ -> do
  cols <- read <$> REPL_.Process.readProcess "tput" ["cols"] ""
  let prompt = "\ESC[46m\STX%call(/Users/rob/.dotfiles/bin/ghci-prompt.sh " <> show (cols :: Int) <> ")\ESC[m\STX\n\ESC[1;36m\STXλ \ESC[m\STX"
  pure (unlines [ ":set prompt " <> show prompt ]))
:}
:setupPrompt
:set prompt-cont "\ESC[1;36m\STX⋮ \ESC[m\STX"
:{
:set prompt-function \ ms _ -> do
  cols <- read <$> REPL_.Process.readProcess "tput" ["cols"] ""
  (_, output, _) <- REPL_.Process.readProcessWithExitCode "git" ["describe", "--contains", "--all", "HEAD"] ""
  let branch = if null output then "" else "(" ++ init output ++ ")"
      m = cols - length branch
      mns = Data.List.intercalate ", " ms
  pure (Text.Printf.printf "\ESC[46m\STX%*s\r%s\ESC[m\STX\n\ESC[1;36m\STXλ \ESC[m\STX" cols branch (if length mns > m then take (m - 2) mns ++ "…" else mns))
:}

-- Better errors
:set -ferror-spans -freverse-errors -fprint-expanded-synonyms -fshow-warning-groups

-- Path-local ghci history
:set -flocal-ghci-history

-- Better typed holes
:set -funclutter-valid-hole-fits -fabstract-refinement-hole-fits
-- Disabled due to performance: noticeably slows down uses of typed holes.
-- :set -frefinement-level-hole-fits=2

:seti -Wno-type-defaults

-- A macro to force reloading
:def! r! (\ _ -> pure (unlines [":set -fforce-recomp", ":r", ":set -fno-force-recomp"]))

:set -j -v1 -fwrite-interface -fobject-code -ferror-spans -freverse-errors -flocal-ghci-history
:set -package pretty-simple -package process

:seti -XTypeApplications

:def! pretty \ _ -> pure ":set -interactive-print Text.Pretty.Simple.pPrint"

:def! no-pretty \ _ -> pure ":set -interactive-print System.IO.print"

:def! r \_ -> pure ":reload\n:pretty"

:seti -fbreak-on-error

:set -Wwarn

:set stop :list

:set prompt-function \ ms _ -> do { cols <- read <$> System.Process.readProcess "tput" ["cols"] "" ; branch <- ("(" ++) . (++ ")") . init <$> System.Process.readProcess "git" ["symbolic-ref", "--short", "HEAD"] "" ; let { m = cols - length branch ; mns = Data.List.intercalate ", " ms } ; pure (Text.Printf.printf "\ESC[46m\STX%*s\r%s\ESC[m\STX\n\ESC[1;36m\STXλ \ESC[m\STX" cols branch (if length mns > m then take (m - 2) mns ++ "…" else mns)) }

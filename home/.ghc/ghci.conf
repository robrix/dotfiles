-- Basic verbosity
:set -v1

-- Compile to object code
:set -fwrite-interface -fobject-code

-- Pretty-printing
:set -package pretty-simple
:def! pretty \ _ -> pure ":set -interactive-print Text.Pretty.Simple.pPrint"
:def! no-pretty \ _ -> pure ":set -interactive-print System.IO.print"
:def! r \_ -> pure ":reload\n:pretty"

-- Enable some language extensions
:seti -XFlexibleContexts -XTypeApplications

-- Break on errors
:seti -fbreak-on-error

-- Treat warnings as warnings
:set -Wwarn

-- Automatically show the code around breakpoints
:set stop :list

-- Use a multiline cyan prompt
:set -package process
:{
:set prompt-function \ ms _ -> do
  cols <- read <$> System.Process.readProcess "tput" ["cols"] ""
  (_, output, _) <- System.Process.readProcessWithExitCode "git" ["rev-parse", "--abbrev-ref", "HEAD"] ""
  let branch = if null output then "" else "(" ++ init output ++ ")"
      m = cols - length branch
      mns = Data.List.intercalate ", " ms
  pure (Text.Printf.printf "\ESC[46m\STX%*s\r%s\ESC[m\STX\n\ESC[1;36m\STXλ \ESC[m\STX" cols branch (if length mns > m then take (m - 2) mns ++ "…" else mns))
:}
:set prompt-cont "\ESC[1;36m\STX⋮ \ESC[m\STX"

-- Better errors
:set -ferror-spans -freverse-errors -fprint-expanded-synonyms

-- Path-local ghci history
:set -flocal-ghci-history

-- Better typed holes
:set -funclutter-valid-hole-fits -fabstract-refinement-hole-fits -frefinement-level-hole-fits=2

-- Enable pretty-printing immediately
:pretty
